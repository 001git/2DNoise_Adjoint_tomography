#!/bin/bash
# this is <new>
# ----------------------------------------------------------------------------
#
# Copyright (c) 2001 by Thomas Forbriger (IMGF Frankfurt)
# Copyright (c) 2014 by Thomas Forbriger (BFO, Schiltach)
#
# a shell script that will supercede all previous (specific) bodyguards
#
# ----
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# ----
#
# REVISIONS and CHANGES
#    08/05/2001   V1.0   Thomas Forbriger
#    12/01/2002   V1.1   continue with this conecpt 
#    21/01/2002   V1.2   now support makefiles
#    19/02/2002   V1.3   supports LaTeX
#    20/02/2002   V1.4   supports Fortran77
#    26/02/2002   V1.5   support shell scripts
#    17/09/2002   V1.6   allow for Fortran inc-files
#    15/11/2002   V1.7   meets libtfxx interface
#    22/11/2002   V1.8   match libtfxx specifications
#    24/03/2003   V1.9   now at BFO
#    09/07/2004   V1.10  added awk
#    13/02/2005   V1.11  added txt
#    28/06/2005   V1.12  added C
#    10/04/2006   V1.13  added matlab
#    24/10/2010   V1.14  read programmers name from /etc/passwd
#    30/04/2012   V1.15  added python
#    16/03/2014   V1.16  added perl
#    29/01/2015   V1.17  do not use subversion Id keyword - operate in git
#    04/10/2015   V1.18  add type stxt
#    26/10/2015   V1.19  add type bash
#
# ============================================================================
#
NEW_VERSION="NEW   V1.19  all purpose bodyguard"

tmpfile=/tmp/new$$.tmp

TEMP=$(getopt -o h --long help -n $(basename $0) -- "$@")
eval set -- "$TEMP"

usage()
{
  echo "$NEW_VERSION"
  echo "Usage: $(basename $0) type file..."
  echo "   or: $(basename $0) --help|-h"
}

help()
{
  echo "type            type of file create"
  echo "                ccmain:     C++ main file"
  echo "                ccpair:     pair of C++ file and prototype header"
  echo "                cc:         a generic C++ source code file"
  echo "                cch:        a generic C++ header file"
  echo "                make:       Makefile"
  echo "                latex:      latex file"
  echo "                matlab:     matlab m-file"
  echo "                fmain:      Fortran77 main program"
  echo "                f:          Fortran77 source code"
  echo "                sh:         Bourne-Shell script"
  echo "                bash:       Bourne-Again-Shell script"
  echo "                awk:        AWK script"
  echo "                txt:        any text file"
  echo "                stxt:       any text file; comment lines start with #"
  echo "                C:          C source code"
  echo "                python:     python file"
  echo "file...         one or more filenames"
}

#
# basic definitions
#

whodidit="Thomas Forbriger"
whodidit="$(grep $(id -un) /etc/passwd | cut -f 5 -d ':')"
institution="(BFO Schiltach)"
linea='----------------------------------------------------------------------'
linea=' ------'$linea
lineb='======================================================================'
lineb=' ======'$lineb
today=`date +'%d/%m/%Y'`
year=`date +'%Y'`

# ===========================================================================
# functions to create appropriate headers for various file types
# --------------------------------------------------------------
#

txt_header()
{
NONE=""
NAME="$1"
PURPOSE="$2"
PURPOSELEN=$(echo $(echo $PURPOSE | wc -c))
LINEA="$(echo "$linea" | cut -c"2-${PURPOSELEN}" )"
LINEB="$(echo "$lineb" | cut -c"2-" )"
/bin/cat > $tmpfile <<HERE
this is <$NAME>
$LINEB
$PURPOSE
$LINEA
HERE
}
#
# END OF txt_header()
#

# ----------------------------------------------------------------------------
tex_header()
{
NONE=""
/bin/cat > $tmpfile <<HERE
% this is <$1>
%$linea
% 
% Copyright (c) $year by $whodidit $institution 
% 
% $2
% 
% REVISIONS and CHANGES 
%    $today   V1.0   Thomas Forbriger
% 
%$lineb
%
HERE
}
#
# END OF tex_header()
#

# ----------------------------------------------------------------------------
generic_shell_header()
{
NONE=""
if [ -n "$3" ]
then
  echo "$3" > $tmpfile
else
  if [ -e $tmpfile ]
  then
    /bin/rm $tmpfile
  fi
fi
/bin/cat >> $tmpfile <<HERE
# this is <$1>
#$linea
# 
# Copyright (c) $year by $whodidit $institution 
# 
# $2
# 
# REVISIONS and CHANGES 
#    $today   V1.0   $whodidit
# 
#$lineb
#
HERE
}
#
# END OF generic_shell_header()
#

# ----------------------------------------------------------------------------
f_header()
{
NONE=""
/bin/cat > $tmpfile <<HERE
c this is <$1>
c$linea
c
c Copyright (c) $year by $whodidit $institution 
c
c $2
c
c REVISIONS and CHANGES
c    $today   V1.0   $whodidit
c
c$lineb
c
HERE
}
#
# END OF f_header()
#


# ----------------------------------------------------------------------------
cc_header()
{
NONE=""
/bin/cat > $tmpfile <<HERE
/*! \\file $1
 * \\brief $2
 * 
 *$linea
 * 
 * \\author $whodidit
 * \\date $today
 * 
 * $2
 * 
 * Copyright (c) $year by $whodidit $institution 
 * 
 * REVISIONS and CHANGES 
 *  - $today   V1.0   $whodidit
 * 
 *$lineb
 */
HERE
}
#
# END OF cc_header()
#

# ============================================================================
# functions to create appropriate file bodies for various file types
# ------------------------------------------------------------------
#
c_body()
{
NONE=""
  UPPERNAME=TF_$(cc_idmacro $1)
  HEADERFILE=$(basename $1 .c).h
/bin/cat >> $tmpfile << HERE
#define ${UPPERNAME}_VERSION \\
  "${UPPERNAME}   V1.0   $2"

#include <${HEADERFILE}>

HERE
}
#
# END OF c_body()
#

# ----------------------------------------------------------------------------
cc_body()
{
NONE=""
  UPPERNAME=TF_$(cc_idmacro $1)
  HEADERFILE=$(basename $1 .cc).h
/bin/cat >> $tmpfile << HERE
#define ${UPPERNAME}_VERSION \\
  "${UPPERNAME}   V1.0   $2"

#include <${HEADERFILE}>

namespace tf {

}
HERE
}
#
# END OF cc_body()
#

# ----------------------------------------------------------------------------
cc_hfile_body()
{
NONE=""
  UPPERNAME=TF_$(cc_idmacro $1)
/bin/cat >> $tmpfile << HERE

// include guard
#ifndef ${UPPERNAME}_VERSION

#define ${UPPERNAME}_VERSION \\
  "${UPPERNAME}   V1.0   $2"

namespace tf {

}

#endif // ${UPPERNAME}_VERSION (includeguard)
HERE
}
#
# END OF cc_hfile_body()
#

# ----------------------------------------------------------------------------
ccmain_body()
{
NONE=""
  UPPERNAME=$(str_upper $1)
/bin/cat >> $tmpfile << HERE
#define ${UPPERNAME}_VERSION \\
  "${UPPERNAME}   V1.0   $2"

#include <iostream>
#include <tfxx/commandline.h>

using std::cout;
using std::cerr;
using std::endl;

int main(int iargc, char* argv[])
{

  // define usage information
  char usage_text[]=
  {
    ${UPPERNAME}_VERSION "\\n"
    "usage: $1" "\\n"
    "   or: $1 --help|-h" "\\n"
  };

  // define full help text
  char help_text[]=
  {
    " "
  };

  // define commandline options
  using namespace tfxx::cmdline;
  static Declare options[]= 
  {
    // 0: print help
    {"help",arg_no,"-"},
    // 1: verbose mode
    {"v",arg_no,"-"},
    {NULL}
  };

  // no arguments? print usage...
  if (iargc<2) 
  {
    cerr << usage_text << endl;
    exit(0);
  }

  // collect options from commandline
  Commandline cmdline(iargc, argv, options);

  // help requested? print full help text...
  if (cmdline.optset(0))
  {
    cerr << usage_text << endl;
    cerr << help_text << endl;
    exit(0);
  }

  // dummy operation: print option settings
  for (int iopt=0; iopt<2; iopt++)
  {
    cout << "option: '" << options[iopt].opt_string << "'" << endl;
    if (cmdline.optset(iopt)) {  cout << "  option was set"; }
    else { cout << "option was not set"; }
    cout << endl;
    cout << "  argument (string): '" << cmdline.string_arg(iopt) << "'" << endl;
    cout << "     argument (int): '" << cmdline.int_arg(iopt) << "'" << endl;
    cout << "    argument (long): '" << cmdline.long_arg(iopt) << "'" << endl;
    cout << "   argument (float): '" << cmdline.float_arg(iopt) << "'" << endl;
    cout << "  argument (double): '" << cmdline.double_arg(iopt) << "'" << endl;
    cout << "    argument (bool): '";
    if (cmdline.bool_arg(iopt))
    { cout << "true"; } else { cout << "false"; }
    cout << "'" << endl;
  }
  while (cmdline.extra()) { cout << cmdline.next() << endl; }

  // dummy operation: print rest of command line
  while (cmdline.extra()) { cout << cmdline.next() << endl; }
}
HERE
}
#
# END OF ccmain_body()
#

# ----------------------------------------------------------------------------
fmain_body()
{
NONE=""
BASENAME=$(basename $1 .f)
UPPERNAME=$(str_upper $BASENAME)
/bin/cat >> $tmpfile << HERE
      program $BASENAME
c
      character*(*) version
      parameter(version='$UPPERNAME   V1.0   $2')
c
c commandline
      integer maxopt, lastarg, iargc
      character*80 argument
      parameter(maxopt=2)
      character*2 optid(maxopt)
      character*40 optarg(maxopt)
      logical optset(maxopt), opthasarg(maxopt)
c debugging
      logical debug, verbose
c here are the keys to our commandline options
      data optid/2h-d, 2h-v/
      data opthasarg/2*.FALSE./
      data optarg/2*1h-/
c
c------------------------------------------------------------------------------
c basic information
c
c
      argument=' '
      if (iargc().eq.1) call getarg(1, argument)
      if ((argument(1:5).eq.'-help').or.(iargc().lt.1)) then
        print *,version
        print *,'Usage: $BASENAME arguments'
        print *,'   or: $BASENAME -help'
        if (argument(1:5).ne.'-help') 
     &    stop 'ERROR: wrong number of arguments'
        print *,' '
        print *,'j'
        print *,' '
        stop
      endif
c
c------------------------------------------------------------------------------
c read command line arguments
c
      call tf_cmdline(1, lastarg, maxopt, optid,
     &                optarg, optset, opthasarg)
      debug=optset(1)
      verbose=optset(2)
c
c------------------------------------------------------------------------------
c go
c
      stop
      end
c
HERE
}
#
# END OF fmain_body()
#


# ----------------------------------------------------------------------------
latex_body()
{
title=$1
/bin/cat >> $tmpfile <<HERE
\documentclass{article}
\usepackage{ngerman}
\usepackage{pslatex}
\usepackage{anysize}
\usepackage{amsmath}
\usepackage{graphicx}
\begin{document}
\title{$title}
\author{$whodidit}
\date{$institution}
\maketitle
\end{document}
HERE
}
#
# END OF latex_body()
#

# ----------------------------------------------------------------------------
perlfile_body()
{
/bin/cat >> $tmpfile <<HERE

use strict;
use warnings;

HERE
}
#
# END OF makefile_body()
#

# ----------------------------------------------------------------------------
makefile_body()
{
TAB="	"
/bin/cat >> $tmpfile <<HERE

all:

flist: Makefile
${TAB}echo $^ | tr ' ' '\\n' | sort > \$@

.PHONY: edit
edit: flist; vim \$<

.PHONY: clean
clean: ; 
${TAB}-find . -name \\*.bak | xargs --no-run-if-empty /bin/rm -v
${TAB}-/bin/rm -vf flist

HERE
}
#
# END OF makefile_body()
#

# ============================================================================
# functions to create appropriate end-of-file statements
# ------------------------------------------------------
#
c_closing()
{
/bin/cat >> $tmpfile <<HERE

/* ----- END OF $1 ----- */
HERE
}
#
# END OF c_closing()
#

# ----------------------------------------------------------------------------
txt_closing()
{
/bin/cat >> $tmpfile <<HERE

----- END OF $1 ----- 
HERE
}

#
# END OF txt_closing()
#

# ----------------------------------------------------------------------------
generic_shell_closing()
{
/bin/cat >> $tmpfile <<HERE

# ----- END OF $1 ----- 
HERE
}
#
# END OF generic_shell_closing()
#

# ----------------------------------------------------------------------------
tex_closing()
{
/bin/cat >> $tmpfile <<HERE

% ----- END OF $1 ----- 
HERE
}
#
# END OF tex_closing()
#

# ----------------------------------------------------------------------------
f_closing()
{
/bin/cat >> $tmpfile <<HERE
c
c ----- END OF $1 ----- 
HERE
}
#
# END OF f_closing()
#

# ============================================================================
# utility functions
# -----------------
#
str_upper()
{
  echo $1 | tr 'a-z' 'A-Z'
}
#
# END OF str_upper()
#

# ----------------------------------------------------------------------------
cc_idmacro()
{
  echo $1 | tr '.' '_' | tr 'a-z' 'A-Z'
}
#
# END OF cc_idmacro()
#

# ----------------------------------------------------------------------------
get_purpose()
{
  echo enter brief description: >&2
  read brief
  echo $brief
}
#
# END OF get_purpose()
#

# ----------------------------------------------------------------------------
catch_old()
{
#  echo /bin/cp $1 $1.bak
  if [ -e $1 ]
  then
    /bin/cat $1 >> $tmpfile
  fi
}
#
# END OF catch_old()
#

# ----------------------------------------------------------------------------
create_bak()
{
#  echo /bin/cp $1 $1.bak
  if [ -e $1 ]
  then
    /bin/cp $1 $1.bak
  fi
}
#
# END OF create_bak()
#

# ----------------------------------------------------------------------------
fetch_tmp()
{
#  echo /bin/mv $tmpfile $1
  /bin/mv $tmpfile $1
}
#
# END OF fetch_tmp()
#

# ==========================================================================
# functions to control file modification for various file types
# -------------------------------------------------------------
#

create_f()
{
  BASENAME=$1
  FILENAME=$1
  PURPOSE=$(get_purpose)
  create_bak $FILENAME
  f_header $FILENAME "$PURPOSE"
  catch_old $FILENAME
  f_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_f()
#

# ----------------------------------------------------------------------------
create_fmain()
{
  BASENAME=$(basename $1 .f)
  FILENAME=$BASENAME.f
  PURPOSE=$(get_purpose)
  create_bak $FILENAME
  f_header $FILENAME "$PURPOSE"
  fmain_body $BASENAME "$PURPOSE"
  catch_old $FILENAME
  f_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_fmain()
#

# ----------------------------------------------------------------------------
create_ccmain()
{
  BASENAME=$(basename $1 .cc)
  FILENAME=$BASENAME.cc
  PURPOSE=$(get_purpose)
  create_bak $FILENAME
  cc_header $FILENAME "$PURPOSE"
  ccmain_body $BASENAME "$PURPOSE"
  catch_old $FILENAME
  c_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_ccmain()
#

# ----------------------------------------------------------------------------
create_ccpair()
{
  BASENAME=$(basename $(basename $1 .cc) .h)
  FILENAME=$BASENAME.cc
  HFILENAME=$BASENAME.h
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  cc_header $FILENAME "$PURPOSE (implementation)"
  cc_body $FILENAME 
  catch_old $FILENAME
  c_closing $FILENAME
  fetch_tmp $FILENAME

  create_bak $HFILENAME
  cc_header $HFILENAME "$PURPOSE (prototypes)"
  cc_hfile_body $HFILENAME 
  catch_old $HFILENAME
  c_closing $HFILENAME
  fetch_tmp $HFILENAME
}
#
# END OF create_ccpair()
#

# ----------------------------------------------------------------------------
create_C()
{
  BASENAME=$(basename $1 .c)
  FILENAME=$BASENAME.c
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  cc_header $FILENAME "$PURPOSE (implementation)"
  c_body $FILENAME 
  catch_old $FILENAME
  c_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_C()
#

# ----------------------------------------------------------------------------
create_cc()
{
  BASENAME=$(basename $1 .cc)
  FILENAME=$BASENAME.cc
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  cc_header $FILENAME "$PURPOSE (implementation)"
  cc_body $FILENAME 
  catch_old $FILENAME
  c_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_cc()
#

# ----------------------------------------------------------------------------
create_cch()
{
  BASENAME=$(basename $1 .h)
  HFILENAME=$BASENAME.h
  PURPOSE=$(get_purpose)

  create_bak $HFILENAME
  cc_header $HFILENAME "$PURPOSE (prototypes)"
  cc_hfile_body $HFILENAME 
  catch_old $HFILENAME
  c_closing $HFILENAME
  fetch_tmp $HFILENAME
}
#
# END OF create_ccpair()
#

# ----------------------------------------------------------------------------
create_make()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE"
  makefile_body $FILENAME 
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_make()
#

# ----------------------------------------------------------------------------
create_sh()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE" '#!/bin/sh'
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
  chmod +x $FILENAME
}
#
# END OF create_sh()
#

# ----------------------------------------------------------------------------
create_bash()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE" '#!/bin/bash'
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
  chmod +x $FILENAME
}
#
# END OF create_bash()
#

# ----------------------------------------------------------------------------
create_python()
{
  FILENAME=$(basename $1 .py).py
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE" '#!/usr/bin/env python'
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
  chmod +x $FILENAME
}
#
# END OF create_python()
#

# ----------------------------------------------------------------------------
create_perl()
{
  FILENAME=$(basename $1 .pl).pl
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE" '#!/usr/bin/perl -w'
  perlfile_body $FILENAME 
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
  chmod +x $FILENAME
}
#
# END OF create_perl()
#

# ----------------------------------------------------------------------------
create_awk()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE" '#!/bin/gawk'
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
  chmod +x $FILENAME
}
#
# END OF create_awk()
#

# ----------------------------------------------------------------------------
create_matlab()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  tex_header $FILENAME "$PURPOSE"
  catch_old $FILENAME
  tex_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_matlab()
#

# ----------------------------------------------------------------------------
create_latex()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  tex_header $FILENAME "$PURPOSE"
  latex_body "$PURPOSE"
  catch_old $FILENAME
  tex_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_latex()
#

# ----------------------------------------------------------------------------
create_stxt()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  generic_shell_header $FILENAME "$PURPOSE" '# source code text file'
  catch_old $FILENAME
  generic_shell_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_stxt()
#

# ----------------------------------------------------------------------------
create_txt()
{
  FILENAME=$1
  PURPOSE=$(get_purpose)

  create_bak $FILENAME
  txt_header $FILENAME "$PURPOSE"
  catch_old $FILENAME
  txt_closing $FILENAME
  fetch_tmp $FILENAME
}
#
# END OF create_txt()
#

# ============================================================================
# here starts the main code (the switchboard)
# -------------------------------------------

while true; do
  case "$1" in
    --help|-h) usage; echo; help; exit 1;;
    --) shift; break;;
    *) echo "ERROR: option $1 unprozessed"; exit;;
  esac
done

if [ $# -lt 2 ]; then
  usage >&2
  echo "ERROR: missing parameter(s)!" >&2
  exit 2
fi

FILETYPE=$1
shift
echo "creating file(s) of type \"$FILETYPE\""

while test -n "$1"
do
  FILENAME=$1
  shift
  echo "processing file \"$FILENAME\"" 
  case $FILETYPE in
    ccmain) create_ccmain $FILENAME;;
    ccpair) create_ccpair $FILENAME;;
    cc) create_cc $FILENAME;;
    cch) create_cch $FILENAME;;
    make) create_make $FILENAME;;
    latex|tex) create_latex $FILENAME;;
    matlab) create_matlab $FILENAME;;
    fmain) create_fmain $FILENAME;;
    f|fortran) create_f $FILENAME;;
    sh) create_sh $FILENAME;;
    bash) create_bash $FILENAME;;
    awk) create_awk $FILENAME;;
    txt) create_txt $FILENAME;;
    stxt) create_stxt $FILENAME;;
    C) create_C $FILENAME;;
    python) create_python $FILENAME;;
    perl) create_perl $FILENAME;;
    *) echo "ERROR: filetype \"$FILETYPE\" not implemented"; exit;;
  esac
done

/bin/rm $tmpfile 2>/dev/null

#
# ----- END OF new ----- 
