this is <README.make.variables>
============================================================================
how make ist controlled through environment and make variables
============================================================================

We make use of variables in Makefiles to control make and make rules. Some of
these variables are provided by the shell environment and must be defined
there. Others are defined within the Makefile and can be specific to the
source code directory.

Variables essential for the user of the source code are discussed in
README.compile additionally

============================================================================
Variables which must be set in the shell environment
----------------------------------------------------
Some variables are expected by the Makefiles to be set in the shell
environment. They are used to adjust make rules in order to match the users
directory layout oder compiler configuration

make specific variables
-----------------------
We make use of the default rules in the gmake (GNU make) database.
See at the end of this file. 

The following environment variables control the compilers and linkers to be
used. They are set in contrib/SeitoshBashrc

 FC   name of Fortran compiler and linker
 CC   name of C compiler and linker
 CXX  name of C++ compiler and linker

Seitosh specific variables
--------------------------
These variables are used in Makefiles all over the place.
  
LOCBINDIR
  Destination path for binary executables.

LOCLIBDIR
  Destinationpath for binary libraries.
  This is also passed to the linker.

LOCINCLUDEDIR
  Destination path for header files.
  This is also passed to the preprocessor.

SERVERLIBDIR
  Colon separated list of path names. This list is extracted to options passed
  to the linker. NOTICE: Some Makefiles expect a single path and do not yet
  expand a list of path names.

SERVERINCLUDEDIR
  Colon separated list of path names. This list is extracted to options passed
  to the preprocessor. NOTICE: Some Makefiles expect a single path and do not
  yet expand a list of path names.

TF_WWWBASEDIR
  This variable defined the location of the output generated by doxygen.

TF_LINK_FORTRAN
  This variable controls, how C and C++ programs are linked against Fortran
  code provided by binary libraries. The options is passed to the linker and
  depends on the actual Fortran compiler in use.
  For example:
  export TF_LINK_FORTRAN=-lgfortran

TF_LINK_PGPLOT
  This variable control the linker options for programs using PGPLOT. These
  options depend on the properties of the actual installation of PGPLOT.
  For example:
  export TF_LINK_PGPLOT="-lpgplot -lX11 -L/usr/X11/lib -L$PGPLOT_DIR"

============================================================================
Auxilliary variables, not required to compile the code
------------------------------------------------------
These variables are used in the Makefiles and are expected to be presented
through the shell environment.

TF_BROWSER
  contains name of preferred web browser; used in target doxyview

TF_EDIT
  contains path names of additional files to be presented in the flist files
  (index files for edit target).

TF_MAKEPKG
  contains absolute path to Makefile.packages; required to assemble snap-shot
  tar-balls

TF_PUBLICATIONPATH
  contains the absolute path name of the location where snap-shot tar-balls
  and similar products should be copied to

============================================================================
Variables used in Makefiles internally
--------------------------------------

make specific variables
-----------------------
We make use of the default rules in the gmake (GNU make) database.
See at the end of this file. 

The following variables control preprocessor, compilers, and linker. They are
adjusted within the Makefiles to match Seitosh requirements.

 CPPFLAGS   options passed to C preprocessor
 CFLAGS     options passed to the C compiler
 CXXFLAGS   options passed to the C++ compiler
 FFLAGS     options passed to the Fortran compiler
 LDFLAGS    options passed to the linker

It is recommended, that Makefiles add to these variables, rather than just
setting them. This allows the user to set some standard values in the
environment. The content of these variables can entirely be overwritten on the
command line. For this reason it is common to refer to a variable FLAGS in the
assignment, which then can be adjusted by the user.

============================================================================
GNU make default rules
======================
Here we provide a selection of the output of 'make -p':

Fortran compilation and linking
-------------------------------
PREPROCESS.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -F
COMPILE.f = $(FC) $(FFLAGS) $(TARGET_ARCH) -c
COMPILE.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.F = $(FC) $(FFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
LINK.f = $(FC) $(FFLAGS) $(LDFLAGS) $(TARGET_ARCH)
%.f:

%: %.f
#  recipe to execute (built-in):
        $(LINK.f) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.f
#  recipe to execute (built-in):
        $(COMPILE.f) $(OUTPUT_OPTION) $<

%.F:

%: %.F
#  recipe to execute (built-in):
        $(LINK.F) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.F
#  recipe to execute (built-in):
        $(COMPILE.F) $(OUTPUT_OPTION) $<

%.f: %.F
#  recipe to execute (built-in):
        $(PREPROCESS.F) $(OUTPUT_OPTION) $<

# Not a target:
.f.o:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.
#  recipe to execute (built-in):
        $(COMPILE.f) $(OUTPUT_OPTION) $<

C compilation and linking
-------------------------
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -
LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
%.o: %.c
#  recipe to execute (built-in):
        $(COMPILE.c) $(OUTPUT_OPTION) $<
%.c:

%: %.c
#  recipe to execute (built-in):
        $(LINK.c) $^ $(LOADLIBES) $(LDLIBS) -o $@

C++ compilation and linking
---------------------------
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
LINK.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
%.cc:

%: %.cc
#  recipe to execute (built-in):
        $(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) -o $@

%.o: %.cc
#  recipe to execute (built-in):
        $(COMPILE.cc) $(OUTPUT_OPTION) $<

----- END OF README.make.variables ----- 
