/*! \file libdatrwxx/doxygen.txt
 * \brief DATRW++ library: reading seismic data (libdatrwxx)
 *
 * ----------------------------------------------------------------------------
 *
 * Copyright (c) 2002 by Thomas Forbriger (IMG Frankfurt) 
 *
 * ----
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * ----
 * 
 * DATRW++ library: reading seismic data (libdatrwxx)
 *
 * This file contains:
 *  - documentation of namespace datrw
 *  - mainpage text
 * 
 * REVISIONS and CHANGES 
 *  - 06/12/2002   V1.0   Thomas Forbriger (copied from libcontxx)
 *  - 20/10/2010   V1.1   added a description of library behaviour.
 *  - 22/11/2010   V2.0   call it version 2.0 after joining libdatwritexx
 *  - 07/09/2011   V2.1   added notes regarding format modifiers
 *  - 18/07/2013   V2.2   renamed file
 * ============================================================================
 */

/*! \brief Root namespace of library
  
  This namespace contains the generic interface to the library.
  It contains several subnamespaces with interfaces to format specific data
  reading and writing modules.
 */
namespace datrw {
} // namespace datrw

/*======================================================================*/

/*! \mainpage

\author Thomas Forbriger
\since March 2004
\date July 2016
\version V2.1
\date 05/07/2016

\tableofcontents

\section sec_main_contents Contents
\subsection subsec_main_contents_page This page
  - \ref sec_concept
  - \ref sec_Fortran

\subsection subsec_main_others Other pages
\subsubsection subsubsec_main_others_users For library users
    - \subpage page_formats
    - \subpage page_reading_howto
    - \subpage page_reading_operation
    - \subpage page_writing_howto
    - \subpage page_writing_operation
\subsubsection subsubsec_main_others_programmers For library maintainers and programmers
  Upon implementing new features update the version string
  datrw::libversion in \ref aalibdatrwxx.cc
    - \subpage page_implement_istream
    - \subpage page_implement_ostream
    - \subpage page_modifiers
    - \subpage page_utilities
    - \subpage page_notes

.

----

\section sec_concept Concept of the library

  The library provides seismic data file reading and writing
  modules for several data formats. 
  Functionality for all formats is provided through a common interface defined
  in classes datrw::idatstream and datrw::odatstream.
  All format specific classes are derived from these bases.
  The class datrw::ianystream has a same common interface like
  datrw::idatstream
  but provides an inheritance transparent constructor mechanism.
  The same is the case for datrw::oanystream and datrw:odatstream.
  Programs making use of datrw::ianystream and of datrw::oanystream
  for reading seismic data will
  directly benefit from each additional waveform format added to libdatrwxx
  without the need of changing the source code of the library. 
  Just link against libdatrwxx and go...

  \ref page_formats are listed on a separate page.

  Each format specific module will be placed into its own namespace, like
  datrw::hpmo. 
  There you will find specific functions like datrw::hpmo::readdata. 
  The interface provided through these functions is specific to the data
  format. 
  However, for each implemented format we provide a class derived from
  datrw::idatstream, like datrw::ihpmostream and one derived from
  datrw::odatstream, like datrw::osffstream.
  Being derived from a common base class all these format specific classes
  provide a common application programming interface (API).
  This interface handles data in terms of SFF (Stuttgart File Format) data
  elements (like INFO lines and FREE blocks).
  Thus the format specific input classes perform the conversion from the
  specific format to SFF header structures.
  Any data that does not fit into SFF, must be dropped or may be only passed
  via the FREE blocks.
  All SFF data elements not present in the specific format must be replaced by
  default values.
  Similarly the writing modules can only provide header values present in the
  SFF structures.
  Any additional header fields must be filled with default values.

  datrw::idatstream behaves like an input stream for SFF data elements.
  Appropriate input operators are presented in namespace #datrw.
  All derived classes and datrw::ianystream provide the same interface and
  operator set.
  datrw::ianystream is not derived from datrw::idatstream. 
  It rather serves as a handle to any class derived from datrw::idatstream.
  Anyway datrw::ianystream provides the same interface.
  Consider to use datrw::sequentialtracereader instead of
  datrw::ianystream since it provides higher efficiency when reading several
  traces from the same file.
  \sa \ref page_reading_operation

  datrw::odatstream behaves like an output stream for SFF data elements.
  Appropriate output operators are presented in namespace #datrw.
  All derived classes and datrw::oanystream provide the same interface and
  operator set.
  datrw::oanystream is not derived from datrw::odatstream. 
  It rather serves as a handle to any class derived from datrw::odatstream.
  Anyway datrw::oanystream provides the same interface.
  \sa \ref page_writing_operation
  
\date 11/2010

\section sec_Fortran Notes for Fortran programmers

  The library libfapidxx provides an API (application programming interface)
  in Fortran 77 which mimics the API of libsff.
  Through this API the full functionality of libdatrwxx can be accessed with
  only minor modifications being necessary for Fortran programs which already
  use libsff for seismic data input and output.

  \sa 
    http://gpitrsvn.gpi.uni-karlsruhe.de/~tforb/doc/libfapidxx/,
    http://gpitrsvn.gpi.uni-karlsruhe.de/~tforb/doc/libsffxx/,
    https://git.scc.kit.edu/Seitosh/Seitosh/wikis/src_libs_libfapidxx

\date 06/2016
*/

/*======================================================================*/

/*! \page page_reading_howto HOWTO read data of any supported format

  Here I provide an example on how to read seismic data using
  datrw::ianystream and writing it to a different file via sff::SFFostream.
  Consider the names of input files given in
  \code
    std::list<std::string> infiles;
  \endcode
  and the name of the output file given in
  \code
    std::string outfile;
  \endcode
  The type of the input files are given in
  \code
    datrw::Eformat format;
  \endcode
  which can be created from a string specifier
  \code
    std::string type;
  \endcode
  through 
  \code
    format=datrw::anyID(type);
  \endcode
  We assume that a file FREE block
  \code
    sff::FREE filefree;
  \endcode
  was already prepared to be written.

  Reading an writing of data will than take place like in the code example
  given here:
  \code
  // create an output file stream
  std::ofstream ofs(outfile.c_str());
  // create an interfacing SFF output stream
  sff::SFFostream<Tseries> os(ofs, opt.debug);
  // write the file FREE block to the output file
  os << filefree;
  // here we could also write an SRCE line

  // create iterator to browse list of input files
  std::list<std::string>::const_iterator infile=infiles.begin();
  while( infile!=infiles.end())
  {
    // open input stream for reading next file, use correct open mode
    std::ifstream ifs(infile->c_str(), datrw::ianystream::openmode(format));
    // create an interface to the input stream
    datrw::ianystream is(ifs, format);

    // cycle through all traces while input stream provides data
    while(is.good())
    {
      // create a double precision series container
      datrw::Tdseries series;
      // read and write the series
      is >> series;
      os << series;
      // create a WID2 line structure
      sff::WID2 wid2;
      // read and write the WID2 header
      is >> wid2;
      os << wid2;
      // read and write INFO line and trace FREE block is present
      if (is.hasinfo()) { sff::INFO info; is >> info; os << info; }
      if (is.hasfree()) { sff::FREE free; is >> free; os << free; }
    }
    // next file
    ++infile;
  }
  \endcode

  \sa \ref page_reading_operation
  \date 11/2010
*/

/*======================================================================*/

/*! \page page_reading_operation Description of reading operation

All input streams are derived from datrw::idatstream.
The interface of datrw::idatstream consequently defines the behaviour of all
input stream classes.
datrw::ianystream implements the same interface and behaviour.
It is a general input stream, more or less, which selects one of the
implemented stream classes based on the second parameter passed to its
constructor datrw::ianystream::ianystream().

\section sec_howtoworks_go So, what happens when you are up to read a file?

\subsection subsec_howtoworks_fileheader Reading the file header
You create an instance of the input stream class by passing an C++ istream
(usually a std::ifstream opened with the appropriate open mode as indicated by
\ref openmode of the libdatrwxx input stream class, like
datrw::isffstream::openmode)
from which data should be read to the constructor of the stream class.
The constructor of the input stream starts reading the file by parsing the 
\em file \em header.
Before continuing by reading the trace data, the user can extract information
from the file header.
This is done by the \em file \em header \em query \em functions
\li datrw::idatstream::hasfree()
\li datrw::idatstream::hassrce()
\li datrw::idatstream::free()
\li datrw::idatstream::srce()

At this stage the functions datrw::idatstream::hasfree() and
datrw::idatstream::free() provide access to the FREE block of the file
header.
After reading the first trace, the FREE block of the file header
will no longer be accessible.
This sequential behaviour ist the only way to distinguish between file FREE
blocks and trace FREE blocks together with input operators.

\subsection subsec_howtoworks_tracedata Reading samples from a trace
Then the user continues by reading the samples of the first trace in the file
by calling one of the \em series \em query \em functions
\li datrw::idatstream::dseries()
\li datrw::idatstream::fseries()
\li datrw::idatstream::iseries()

These functions immediately return a container of type aff::Series of
appropriate type (as provided by typedefs datrw::Tdseries,
datrw::Tfseries, and datrw::Tiseries).
Not all of them may be provided by a specific stream class.
To check for the available types, use the \em sample \em type \em query
\em functions
\li datrw::idatstream::providesd()
\li datrw::idatstream::providesf()
\li datrw::idatstream::providesi()

The available data types usually reflect the data types used within the data
file.
Usually input stream classes for data formats containing floating point
values for the samples do not provide integer type \em series \em query
\em functions.

\subsection subsec_howtoworks_traceheader Reading a trace header
While parsing the trace data, the input stream classes collect trace header
information.
After returning the samples, this data is available through the 
\em header \em query \em functions
\li datrw::idatstream::hasfree()
\li datrw::idatstream::hasinfo()
\li datrw::idatstream::free()
\li datrw::idatstream::info()
\li datrw::idatstream::wid2()

A WID2 line is provided in any case, containing data like the time of the
first sample, the sampling rate and the number of samples.
Notice that the functions datrw::idatstream::hasfree() and
datrw::idatstream::free() now operate on the FREE block of the trace.

\subsection subsec_howtoworks_moredata Reading the next trace
If the input provides more than one trace, the user continues to call the
\em series \em query \em functions, causing the stream class to parse the next
trace. After returning the trace data, the header data for this trace is
available through the \em header \em query \em functions.
The \em state \em query \em functions
\li datrw::idatstream::last()
\li datrw::idatstream::good()

indicate whether further data can be expected in the file.

\subsection subsec_howtoworks_skip What is skipseries() for?
Some file formats produce a significant overhead when data actually is read.
One example is the class datrw::imseedstream for reading MiniSEED data.
If the users likes to fast-forward to trace number 27, it is very inefficient
to actually decode traces 1 to 26.
In such a case calling the \em skip \em function
\li datrw::idatstream::skipseries()

for traces 1 to 26 and using one of the \em series \em query \em functions for
trace 27 only can speed up the whole procedure.
This however ist not the case for all file formats.
The classes for reading multiplexing file formats like HPMO
(datrw::ihpmostream) and TSOFT (datrw::itsoftstream) have to
decode all traces at once and buffer them in internal storage in any case.

Nevertheless, datrw::idatstream::skipseries() parses the header data of the
trace and provides all the extracted information through the \em header \em
query \em functions.
For this reason, using the \em skip \em function is a convenient way to browse
a whole data file quickly to check its contents.

\subsection subsec_howtoworks_operators Ever heard of input operators?
Input operators support an easy way to apply the modules in this library.
Almost all data query functions (be it header data or trace samples) can be
accessed through input operators.
This is the case for all classes.
The operators are provided in namespace ::datrw.
\sa \ref page_reading_howto, ::datrw
\date 11/2010
*/

/*======================================================================*/

/*! \page page_writing_howto HOWTO write data of any supported format
 
   A complete example is provided in \ref writetest.cc
 
  You should include
  \code
#include <datrwxx/writeany.h>
  \endcode
  to write data and
  \code
#include <datrwxx/readany.h>
  \endcode
  to read data.

  Consider that the properties of your output file are given as
  \code
std::string outfile; // name of output file
datrw::Eformat outputformat; // format of output file
bool overwrite; // true, if existing file should be overwritten
  \endcode

  Open the output file:
  \code
if (!overwrite) { datrw::abort_if_exists(outfile); }
std::ofstream ofs(outfile.c_str(),
                  datrw::oanystream::openmode(outputformat));
datrw::oanystream os(ofs, outputformat);
  \endcode

  A way to report the data type used to store sample values:
  \code
cout << "file data is stored in ";
// report output data format
switch (os.seriestype()) {
  case datrw::Fint:
    cout << "integer";
    break;
  case datrw::Ffloat:
    cout << "single precision floating point";
    break;
  case datrw::Fdouble:
    cout << "double precision floating point";
    break;
  case datrw::Fall:
    cout << "any desired";
    break;
  default:
    TFXX_abort("output stream uses unknown variable type!");
} // switch (os.seriestype())
cout << " variable type" << endl;
  \endcode

  Consider that input is copied from an 
  \code
datrw::idatstream is(ifs, inputformat);
\endcode

Copy file header data:
\code
if (is.hasfree())
{
  if (os.handlesfilefree())
  {
    sff::FREE filefree;
    is >> filefree;
    os << filefree;
  }
  else
  {
    cout << "file FREE block is discarded." << endl;
  }
} // if (is.hasfree())
if (is.hassrce())
{
  if (os.handlessrce())
  {
    sff::SRCE srceline;
    is >> srceline;
    os << srceline;
  }
  else
  {
    cout << "SRCE line is discarded." << endl;
  }
}
  \endcode

  Read the input series:
  \code
aff::Series<double> series;
is >> series;
  \endcode

  Pass trace header data:
  \code
// pass WID2
sff::WID2 wid2;
is >> wid2;
os << wid2;

// pass INFO
if (is.hasinfo())
{
  if (os.handlesinfo())
  {
    sff::INFO infoline;
    is >> infoline;
    os << infoline;
  }
  else
  {
    if (opt.verbose)
    {
      cout << "  INFO line is discarded." << endl;
    }
  }
}

// pass trace FREE
if (is.hasfree())
{
  if (os.handlestracefree())
  {
    sff::FREE freeblock;
    is >> freeblock;
    os << freeblock;
  }
  else
  {
    if (opt.verbose)
    {
      cout << "  trace FREE block is discarded." << endl;
    }
  }
}
  \endcode

  Write actual time series:
  \code
os << series;
  \endcode

\date 17.12.2010
*/

/*======================================================================*/

/*! \page page_writing_operation Description of writing operation

All output streams are derived from datrw::odatstream.
The interface of datrw::odatstream consequently defines the behaviour of all
output stream classes.
datrw::oanystream implements the same interface and behaviour.
It is a general output stream, more or less, which selects one of the
implemented stream classes based on the second parameter passed to its
constructor datrw::oanystream::oanystream().

\section sec_out_howtoworks_go So, what happens when you are up to write a file?

\subsection subsec_out_howtoworks_fileheader Writing the file header
You create an instance of the output stream class by passing an C++ ostream
(usually a std::ofstream opened with the appropriate open mode as indicated by
\ref openmode of the libdatrwxx output stream class, like
datrw::osffstream::openmode)
to which data should be written to the constructor of the stream class.

Then you can use the \em file \em header \em set \em functions
\li datrw::odatstream::setfree()
\li datrw::odatstream::setsrce()

or the corresponding output operators to write file header data.
The functions
\li datrw::odatstream::handlesfilefree()
\li datrw::odatstream::handlessrce()

tell you whether the specific output stream can handle file FREE block and
SRCE data.
This is not possible for all data formats.

A call to datrw::odatstream::setwid2() will flush the file header.
Any subsequent call to datrw::odatstream::setfree() will pass a trace FREE
block and not a file FREE block.

\subsection subsec_out_howtoworks_tracedata Writing samples to a trace
Prior to writing the actual time series, you have to pass the trace header
data to the output stream.
You can do this through the \em trace \em header \em set \em functions
\li datrw::odatstream::setwid2()
\li datrw::odatstream::setinfo()
\li datrw::odatstream::setfree()

or the corresponding output operators.
A call to datrw::odatstream::setwid2() per trace is mandatory.
The functions
\li datrw::odatstream::handlestracefree()
\li datrw::odatstream::handlesinfo()

tell you whether the specific output stream can handle trace FREE block and
INFO data.
This is not possible for all data formats.

Finally you use the overloaded
\em series \em set \em function
\li datrw::odatstream::writeseries()

or the corresponding output operator to write the actual time series.
This call will flush the trace such that a subsequent call to a trace header
set function will pass data to the next trace.

\note
The output stream classes are intended to take any type of data (floating
point as well as integer).
\b Beware that floating point data will be truncated when being written to an
integer data file format.

You can check this by the \em series \em type \em query \em function
\li datrw::odatstream::seriestype()

\subsection subsec_howtoworks_operators Ever heard of output operators?
Output operators support an easy way to apply the modules in this library.
Almost all data set functions (be it header data or trace samples) can be
accessed through output operators.
This is the case for all classes.
The operators are provided in namespace ::datrw.

\sa \ref page_writing_howto, ::datrw
\date 11/2010
*/

/*======================================================================*/

/*! \page page_modifiers HOWTO use format modifiers

  Some I/O stream support format modifiers.
  The corresponding streams take a string argument in the constructor through
  which the user can pass additional parameters to control the behaviour of
  the stream.
  Such streams should mak use of datrw::Subformat to parse the parameter
  string.
  Since 09/2011 (V2.1 of the library) the constructors of datrw::ianystream
  and datrw::oanystream not taking a modifier string are deprecated and should
  no longer be used.
  The functions datrw::ianystream::open() and datrw::oanystream::open() pass
  modfier strings to I/O streams which support them.
  Information for the user is given by
  datrw::formatmodifiers::online_help(), which is called by
  datrw::online_help().

  \sa datrw::iseifestream::iseifestream(),
      datrw::oseifestream::oseifestream(),
      \ref group_formatmodifiers,
      libdatrwxxtests.cc

  \date 09/2011
*/

/*======================================================================*/

/*! \page page_notes Notes on library development

\todo
  - \ref sec_pass_header_fields_in_FREE_block
  - the libstdc++ documentation recommends to use stream buffers directly
    for binary I/O (see also \ref sec_binary_io)

  \section sec_pass_header_fields_in_FREE_block Pass header fields through FREE block

  Header fields of input formats, which cannot be represented in SFF structs
  can be written of the trace FREE block.
  The writing modules can be equipped with a mechanism to extract these values
  from the FREE block and to write them to the appropriate header fields.
  In such a case the text field should be removed from the FREE block before
  writing to file, to avoid accumulation of such header fields in the FREE
  block due to reading the written file again.

  \section sec_binary_io I/O for binary data formats

  Currently the library uses stream function read and write for binary output
  in modules like the \ref group_mseed.
  These functions apparently are remainders of a pre-standard implementation
  of streams (prior to the invention of stream buffers).
  The GNU libstdc++ documentations recommends to do binary I/O on the
  stream-buffer level, since streams themselves are not meant to do binary
  I/O. 
  Nevertheless binary I/O appears to work with the read and write functions of
  streams.
  However, these functions operate on values of type \c char.
  This could mean that the would still do some kind of character translation,
  which we do not like when reading binary seismic data.
  The stream buffer operations are also defined for character data.
  I currently cannot find sufficient documentation to understand whether there
  is a risk of input or output data being translated with input streams opened
  in binary mode.

  \date 11/2010
*/

/*======================================================================*/

/*! \page page_implement_istream HOWTO implement an input stream

The base class datrw::idatstream takes care of many organizational issues for
you.
You are only responsible to provide code which is capable to actually read
the data from a file stream.

You have to provide at least a derived stream class like datrw::isffstream,
which has to be equipped with:
- a static field like datrw::isffstream::openmode, which indicates the stream
  open mode which should be used for the C++ ostream
  (this field is used to distinguish between ASCII and binary data files)
- a constructor like datrw::isffstream::isffstream(), which calls the base
  class constructor datrw::idatstream::idatstream() and passes the appropriate
  flags; \sa \ref sec_implement_istream_constructor
- four virtual functions like 
  - Tdseries datrw::isffstream::dseries(),
  - Tfseries datrw::isffstream::fseries(),
  - Tiseries datrw::isffstream::iseries(), and/or
  - void datrw::isffstream::skipseries()
  .
  these functions are responsible to read the actual trace data from file;
  this includes the WID2 data, the INFO data, the trace FREE block,
  and the actual time series which
  is returned by the function; 
  \sa \ref sec_implement_istream_readseries, 
  \ref sec_implement_istream_skipseries
- a function like datrw::isffstream::help(), which returns some details on the
  underlying file format properties to an output stream as online help for the
  end-user
- a virtual destructor like datrw::isffstream::~isffstream(); the destructor
  in most cases has an empty function body
.
That's all.

Finally check files readany.h, readany.cc, formats.h, and formats.cc and add
appropriate lines to make the new stream visible through the generic interface
of datrw::ianystream and the functions presented in readany.h.

\section sec_implement_istream_constructor Constructor of stream class

The constructor of the input stream initializes its base class
datrw::idatstream by passing appropriate parameter values to the constructor
datrw::idatstream::idatstream().
The parameters to datrw::idatstream::idatstream() indicate, wheter the stream
will provide 
integer data through virtual member function iseries(), 
single presicion data through virtual member function fseries(), and/or
double presicion data through virtual member function dseries(). 
Only implement those of the virtual sample access functions, which are
supported indeed.
For other request the base class will then throw an exception.
\sa datrw::idatstream::iseries(),
  datrw::idatstream::fseries(),
  datrw::idatstream::dseries()

For reading from the C++ input stream, the member data datrw::idatstream::Mis
is provided to all derived classes.

After initializing the base class, the constructor reads a file header if
there is one.
The information read from file are passed to the base class through functions
- datrw::idatstream::setfilefree() and
   \code
this->setfilefree(freeblock);
   \endcode
- datrw::idatstream::setsrce().
   \code
this->setsrce(srceline);
   \endcode

These functions will set flags appropriately and store the information in
member data fields, such that they can be provided to the user through the
base class interface functions.
- datrw::idatstream::hasfree(),
- datrw::idatstream::free(),
- datrw::idatstream::hassrce(), and
- datrw::idatstream::srce().

\section sec_implement_istream_readseries Reading the samples

The actual reading of traces is controlled by virtual member functions
iseries(), fseries(), and dseries().
They all three behave identical and just return series containers of different
content type.
Only those supported have to be implemented (see above).
Each of these functions does the following:
-# Call the base class member function datrw::idatstream::newtrace() 
   \code
this->newtrace();
   \endcode
-# Read the trace (trace header and samples).
   In most cases it is efficient to implement a private member function
   readheader() like datrw::isustream::readheader(), which reads the header
   fields for the current trace and passes them to the base class member
   fields, since this operation is identical for all reading functions.
   Member functions are then used to set the member data fields.
   The samples of the time series trace have to be read then into a series
   container of appropriate type and be returned by the member function.
   .
   Member functions to set trace header data to member data fields are:
    - datrw::idatstream::setwid2(),
       \code
this->setwid2(wid2line);
       \endcode
    - datrw::idatstream::setinfo(), and
       \code
this->setinfo(infoline);
       \endcode
    - datrw::idatstream::settracefree() 
       \code
this->settracefree(freeblock);
       \endcode
-# If the trace just read is the last trace in the input stream, the base
   class function datrw::idatstream::setlast() has to be called.
   \code
this->setlast();
   \endcode
.
In some cases it is efficient to implement only one of the reading functions
with all details and to implement the others by simple type conversion, like
datrw::isustream::dseries().
When reading ASCII data the template function datrw::util::readasciidouble()
can be useful.

\section sec_implement_istream_skipseries Skipping a trace

The skipseries() member function is implemented exactly like the trace reading
functions.
This function has to read the trace header too and must pass the parameters of
the trace header to the appropriate member data fields.
It just does not allocate memory to read samples.
This can make this function slightly more efficient, if the user just wants to
scan the data file and check trace header information.

\sa 
  \ref page_reading_howto,
  \ref page_reading_operation, 
  \ref page_implement_ostream,
  \ref page_modifiers

\date 09/2011
*/

/*======================================================================*/

/*! \page page_implement_ostream HOWTO implement an output stream

The base class datrw::odatstream takes care of many organizational issues for
you.
You are only responsible to provide code which is capable to actually write
the data to a file stream.
I will use datrw::osffstream as an example.

You have to provide at least a derived stream class like datrw::osffstream,
which has to be equipped with:
- a static field like datrw::osffstream::openmode, which indicates the stream
  open mode which should be used for the C++ ostream
  (this field is used to distinguish between ASCII and binary data files)
- a constructor like datrw::osffstream::osffstream(), which calls the base
  class constructor datrw::odatstream::odatstream() and passes the appropriate
  flags
- a virtual function like datrw::osffstream::writefileheader(); this function
  is called by the base class once the first WID2 data is written to the
  output stream; the function is responsible to flush all accumulated header
  data (SRCE and file FREE) to the file header (if there is one for the
  specific file format); \sa \ref sec_implement_ostream_writefileheader
- three virtual functions like 
  - datrw::osffstream::writetrace(const Tdseries & series)
  - datrw::osffstream::writetrace(const Tfseries & series)
  - datrw::osffstream::writetrace(const Tiseries & series)
  .
  these functions are responsible to write the actual trace data to file;
  this include the WID2 data, the INFO data, the trace FREE block,
  and the actual time series which is passed through an argument; \sa \ref
  sec_implement_ostream_writetrace 
- a function like datrw::osffstream::help(), which returns some details on the
  underlying file format properties to an output stream as online help for the
  end-user
- a virtual destructor like datrw::osffstream::~osffstream(); the destructor
  should flush all remaining data and finish the writing process
.
That's all.

Finally check files writeany.h, writeany.cc, formats.h, and formats.cc and add
appropriate lines to make the new stream visible through the generic interface
of datrw::oanystream and the functions presented in writeany.h.

\section sec_implement_ostream_writefileheader Additional information on the implementation of function writefileheader()

  The C++ ostream to which data should be written is available through the
  protected member data field datrw::odatstream::Mos by inheritance.
  The inherited function datrw::odatstream::hassrce() indicates whether SRCE
  data is available and can be retrieved through the inherited function
  datrw::odatstream::srce().
  The inherited function datrw::odatstream::hasfree() indicates whether FREE
  data is available and can be retrieved through the inherited function
  datrw::odatstream::free().

\section sec_implement_ostream_writetrace Additional information on the implementation of function writetrace()

  This set of functions is responsible to actually write a trace to the C++
  output stream which is available through the protected member data field
  datrw::odatstream::Mos by inheritance. 
  Appropriate sample type conversion has do be done, if necessary.
  The base class datrw::odatstream ensures that WID2 data is available before
  one of these functions is called.
  You can check whether additionally INFO or FREE data is available for the
  trace, by calling the inherited functions datrw::odatstream::hasinfo() or
  datrw::odatstream::hasfree(), respectively.
  The INFO and FREE data is available through the inherited functions
  datrw::odatstream::info() and datrw::odatstream::free().

  \note
  \b Attention: Do not rely on the number of samples passed with the
  ::sff::WID2 to the output stream.
  The number os samples should be set to the actual numer of samples passed to
  function writetrace()!

\sa
  \ref page_writing_howto,
  \ref page_writing_operation, 
  \ref page_implement_istream,
  \ref page_modifiers

\date 8.12.2010

*/

/*======================================================================*/

/*! \page page_data_types Data types

There are numerous potential was to observe the handling of numeric values
read from and written to time series data files.
During file type conversion they are subject to type casts and such can suffer
from round-off errors, numeric overflow or numeric underflow.
For users it might by helpful to produce diagnostic output indicating the
danger of loss of information.
Below I sketch several possibly helpful approaches.
They will only be implemented upon a users request.

\remark
  Some type casts take place outside this library and cannot be trapped by the
  convert function template.
  This is the case for SFF read functions like ::datrw::isffstream::dseries(),
  which use the external InputWaveform module from libsffxx.

\todo
  Think of using file magic to identify data file formats

\todo 
  <typeinfo> provides extended information on intrinsic numeric types

\todo
  <limits> provides numeric_limits template structs for numeric types.
  They can be used to study the potential effect of type casts.

\todo 
  Distinguish between internal represenation of samples in intrinsic data
  types and representation of data in the data file format. For some formats
  the exact representation can only be deduced for the specific file (like
  PDAS format or the planned binary format or seife format).

\sa \ref page_properties

\date 20.12.2010

*/

// ----- END OF doxygen.txt ----
