this is <README>
=====================================================================
libtime: support processing of sampling parameters
=====================================================================

This software is part of the project Seitosh. See README.1st in the root
directory of the collection or https://git.scc.kit.edu/Seitosh/Seitosh for
general installation instructions.

libtime is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version. 

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

=====================================================================

This library supports numerical operations for dates and times with integer
precision down to microseconds. Time comes in two different flavours:

 1. absolute time (like today at 10 o'clock) as supported by
    libtime::TAbsoluteTime in the C++ version of the library
 2. relative times (like the time span between now and christmas) as
    supported by libtime::TRelativeTime in the C++ version of the library.
    For time differences (libtime::TRelativeTime) only positive values are
    accepted. Accidentally the library appears to handle negative value too.
    However, since the underlying Fortran code is designed to handle positive
    values only, functions should throw an exception upon negative values
    being passed.

The modules in the library support operations like:

 1. calculate the number of samples in a time window
 2. calculate the expected time and date for the first sample in
    the next data block
 3. calculate the time gap between two data blocks
 4. calculate the the index of the sample nearest to a given time
 5. calculate the residual time between a given time and the nearest sample

The library provides interfaces in Fortran, C, C++. Unfortunately handling of
leapseconds is not yet supported.

=====================================================================
Installation
------------
Call 'make all' to install C and C++ header files, compile the binary version
of the library and create documentation files. Header files wil be installed
in a directory adressed by the environment variable ${LOCINCLUDEDIR}. Binary
libraries will be placed in ${LOCLIBDIR} and doxygen documentation output will
be written to subdirectories of ${TF_WWWBASEDIR}..

Prerequisites
-------------
This is a base library. It depends only on common system libraries.
To compile the code, current versions of a C, a C++, and a Fortran compiler
are required as well as GNU make and doxygen (for documentation files).

Binary libraries
----------------
Four binary libraries are provided:
  libtime.a:      pure FORTRAN libtime 
  libtime_trad.a: traditional libtime (obsolete)
  libctime.a:     pure C libtime
  libtime++.a:    C++ classlib
  libtime++.so:   C++ classlib (shared library)

Documentation
-------------
For details on the C++ and C implementation of the library please check the
doxygen documentation being created from the source code.

An ASCII text version to the function interfaces in the Fortran 77, C, and C++
versions of the library, see the file libtime.doc which is created during
installation.

Examples
--------
Several examples and test programs are provided in subdirectory test.

=====================================================================
A short description of the Fortran implementation of this library:
------------------------------------------------------------------

  libtime (C) by Thomas Forbriger (IfG Stuttgart) 1997

  A FORTRAN library to manipulate absolute and relative data times
  with a large dynamic range.
 
---------------------------------------------------------------------

time format declaration
 
  the absolute time value is stored in an integer array:
 
  integer date(7)
  date(1)=year
  date(2)=day of year
  date(3)=hour
  date(4)=minute
  date(5)=second
  date(6)=millisecond
  date(7)=microsecond

A year of value 0 will indicate that this is a relative time. This
affects the routines time_norm and time_getdate and time_sprint.
Notice that the routine time_fullyear will NOT be affected by this
declaration and will set a year of value 0 to 2000.
 
The best way to be aware of absolute/relative time confusion is
to finish every manual setting of absolute times by a call to
time_finish and to keep the year value fo relative times zero 
in any case.
 
Absolute times are only accepted from year 100 on. Users must expect
some routines to set year values below 100 to the range of 1970 to 2069.

Only positive time values will be accepted. Therefore routines like
time_sub will return only the absolute value of the difference.
 
---------------------------------------------------------------------

subroutines and what they do
 
time_libversion        returns library version                V1.0
time_isleapyear        returns leapyear flag                  V1.0
time_fullyear          returns full year value                V1.0
time_setdoy            returns day of year                    V1.0
time_getdate           get date from doy                      V1.0
time_sprint            print time to character array          V1.0
time_clear             clears a time record to zero           V1.0
time_norm              set all field to correct value range   V1.0
time_add               add two time records                   V1.0
time_sub               calculate difference                   V1.0
time_copy              copy a time record                     V1.0
time_finish            finish setting of absolute time value  V1.0
time_compare           compare two time values                V1.0
time_mul               multiply relative time by integer n    V1.0
time_div               divide relative time by integer n      V1.0
time_nfit              find number of samples fiitng in time  V1.0
time_read              extra time from a timestring           V1.03
time_info              print description of time format
 
---- END OF README ----
