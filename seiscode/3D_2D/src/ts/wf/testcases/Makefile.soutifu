# this is <Makefile.soutifu>
# ----------------------------------------------------------------------------
# 
# Copyright (c) 2011, 2016 by Thomas Forbriger (BFO Schiltach) 
# 
# Testcases for soutifu
#
# See also README.soutifu
#
# ----
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. 
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# ----
#
# Rules defined in this file require a complete installation of Seitosh along
# with Linux tools like ps2pdf, gnuplot, gs, gv, evince, sed, and a2ps
# 
# REVISIONS and CHANGES 
#    24/06/2011   V1.0   Thomas Forbriger
#    30/09/2011   V1.1   test convolution of additional traces
#    19/03/2016   V1.2   - provide detailed documentation
#                        - add noise to synthetic test data
#                        - provide control plots
# 
# ============================================================================
#
SOUTIFUCASES=1 1_add 2a 2b 2c 3a 3b 3c
SOUTIFURESULTS=$(addprefix soutifu,$(addsuffix _report,$(SOUTIFUCASES)))

.PHONY: all
all: 
	/bin/rm -fv soutifu* 
	$(MAKE) $(addsuffix .pdf,$(SOUTIFURESULTS))

.PHONY: clean
clean: 
	-/bin/rm -vf flist *.xxx *.xxx.* *.sff *.TZ *.TR *.grn *.su

.PHONY: soutifuclean
soutifuclean:
	-/bin/rm -vf soutifu* *.sff *.su stf.fil.xxx *description.xxx

#
# ======================================================================
# 1. Produce synthetic shot gathers by using refmet
# =================================================
# This section provides synthetic seismograms. Model files defined in variable
# MODELS are supported. Waveforms are simulated by the reflectivity method as
# implemented in refmet.
#
# 1a. Prepare control files
# -------------------------
# refmet control files are created from templates such that some parameters
# can be controlled from the command line through make variables.
#
# Basic model files are:
MODELS=2lay.par 2layb.par

# source configuration
# --------------------
# duration of source wavelet
SRCDUR=0.01
# depth of source
SRCDEPTH=0.0005
# control file for single vertical force
zforce.xxx: zforce.tpl
	sed -e 's/<SDUR>/$(SRCDUR)/' \
	  -e 's/<SDEPTH>/$(SRCDEPTH)/' $< > $@

# Create main control file
# ------------------------
# Three main control files are provided
REFMETSRC=zforce.xxx
REFMETMOD=2lay.par
REFMETRCV=linrcv.par
.PRECIOUS: $(REFMETSRC)
#
# a) Allows all templates to be replaced
#    This is not used for the testcases below
refmetmain.xxx: refmetmain.tpl $(REFMETMOD) $(REFMETSRC) $(REFMETRCV)
	sed -e 's/<MODEL>/$(REFMETMOD)/' \
	  -e 's/<SOURCE>/$(REFMETSRC)/' \
	  -e 's/<RECEIVERS>/$(REFMETRCV)/' $< > $@
#
# b) Control file with standard vertical force an reference model
2laymain.xxx: refmetmain.tpl 2lay.par $(REFMETSRC) $(REFMETRCV)
	sed -e 's/<MODEL>/2lay.par/' \
	  -e 's/<SOURCE>/$(REFMETSRC)/' \
	  -e 's/<RECEIVERS>/$(REFMETRCV)/' $< > $@
#
# c) Control file with standard vertical force an modified reference model
2laybmain.xxx: refmetmain.tpl 2layb.par $(REFMETSRC) $(REFMETRCV)
	sed -e 's/<MODEL>/2layb.par/' \
	  -e 's/<SOURCE>/$(REFMETSRC)/' \
	  -e 's/<RECEIVERS>/$(REFMETRCV)/' $< > $@

# Simulate seismograms
# --------------------
# Based on the control files defined above, waveform data is computed by
# refmet. The files 2lay.TZ and 2layb.TZ are used as a basis for testcases
# defined below.
.PRECIOUS: seismo.TZ seismo.TR
seismo.TZ seismo.TR: refmetmain.xxx 
	refmet -v -4 -o seismo -c $<
.PRECIOUS: 2lay.TZ 2lay.TR
2lay.TZ 2lay.TR: 2laymain.xxx 
	refmet -v -4 -o 2lay -c $<
.PRECIOUS: 2layb.TZ 2layb.TR
2layb.TZ 2layb.TR: 2laybmain.xxx 
	refmet -v -4 -o 2layb -c $<

# Plot waveform data
# ------------------
# Create a graphical display of waveform data used for testcases.
soutifubasewaveform.ps: 2lay.TZ 2layb.TZ
	refract -d $@/cps -C -Tt "Basic synthetic time series" \
	  -Sm 2 -Se 2.3 -Sc 5. -Sa 3.5 -Eg -St 0.,1. $^

# ======================================================================
# 2. Fourier Bessel control operation
# ===================================
# This section provide Fourier-Bessel expansion coefficients for the suburface
# models and the vertical single force defined above. This is provided as an
# alternative display of wave propagation properties as resulting from the
# subsurface structure defined by refmet models.
#
# Use the following commands to create Postscript files:
#
#   Fourier-Bessel expansion coefficients for models 2lay and 2layb:
#
#     make -f Makefile.soutifu soutifu2laysyggrn.ps soutifu2laybsyggrn.ps
#
#   Difference in Fourier-Bessel expansion coeffcients for both models:
#
#     make -f Makefile.soutifu soutifudiffgrn.ps

# syg
# ---
# Calculate Fourier-Bessel expansion coefficients
$(patsubst %.par,%syg.grn,$(MODELS)): %syg.grn: %.par zforce.xxx
	syg $^ $@ -P 100,100,100.,10.

# Calculate difference between coefficients for both basic models
diff.grn: 2laysyg.grn 2laybsyg.grn; rm -fv $@; gredi $^ $@

# grepg
# -----
# Create Postscript plot of Fourier-Bessel coefficients
soutifu%grn.ps: %.grn
	grepg $< -W -d $@/ps -p 0.8 -s -f 10 -i -g

# ======================================================================
# 3. Preprocess waveform data
# ===========================
#
# This section provides preprocessed waveform data as a basis for tests to be
# applied to soutifu.
#
# 3a. Remove numerical cut-off phase
# ----------------------------------
# The reflectivity code produces a backpropagating cut-off as a numerical
# artefact. This is removed by selecting a given number of samples at the
# beginning of the seismograms. As a result the following waveform data files
# are provided:
#
# synthetic2lay.sff 
# synthetic2layb.sff 
# syntheticseismo.sff
#
# The number of samples to be used is defined by make variable WINLIM
#
WINLIM=2000
win.fil.xxx: ; printf "win  1,$(WINLIM)\nend\n" > $@
newsynthetic%.sff: %.TZ win.fil.xxx
	stufi $(word 2,$^) -v -o $<; /bin/mv $<.sfi $@

.PRECIOUS: synthetic2lay.sff synthetic2layb.sff syntheticseismo.sff
synthetic2lay.sff synthetic2layb.sff syntheticseismo.sff:
	$(MAKE) new$@ -f Makefile.soutifu
	/bin/cp -vpd new$@ $@

# 3b. Apply a filter, simulating a source time function
# -----------------------------------------------------
# As a second step to simulate recorded data, a filter is applied to the
# waveform data, which simulates a source time function or the response of a
# recording system or both. The filter control file is later used as a
# reference to study the capability to reproduce the filter characteristic by
# soutifu. The filter characteristic can be controlled by make variables.
#
# Low-pass period
STFPER=0.04
# Scaling factor
STFFAC=2.5
# Trigger advance
STFDELAY=0.03
stf.fil.xxx: ; printf "lpb  $(STFPER),4\ndel  $(STFDELAY)\nfac  $(STFFAC)\nend\n" > $@
filtered%.sff: synthetic%.sff stf.fil.xxx
	tidofi -v -o -cf $(word 2,$^) $@ $<

# 3c. Add noise
# -------------
# As a first step to simulate recorded data, white Gaussian noise can be added
# to the synthetic waveforms.
#
# The rms-amplitude of noise is specified by variable NOISEAMP
# a reasonable value to start with is NOISEAMP=1.e-5
NOISEAMP=0.
data%.sff: filtered%.sff 
	printf "noi  $(NOISEAMP)\nend\n" | tidofi -v -o -cs $@ $<

# Display waveforms
# -----------------
# Display waveform data as provided for tests. This way different settings for
# the source time function simulation and data noise can be tested.
#
# soutifusyntheticplot.ps
# soutifunoisyplot.ps
# soutifudataplot.ps
soutifu%plot.ps: %2lay.sff %2layb.sff
	refract -d $@/cps -C -Tt "Synthetic time series" \
	  -Sm 2 -Se 2.3 -Sc 5. -Sa 3.5 -Eg -St 0.,1. $^

# Display waveform amplitudes
# ---------------------------
# Output rms and peak-to-peak amplitudes. This is used to provide a reference
# to adjust the noise amplitude parameter.
%.amp.xxx: %.sff
	sigval -format "%F (trace #%NT at %OFF): rms= %RMS P-P= %PPA" \
	  $< > $@
%.ampdat.xxx: %.sff
	sigval -format "%NT %RMS %PPA" $< > $@
%.amp: %.amp.xxx; cat $<
soutifuamp.ps: plotsoutifuamp.gpt \
  synthetic2lay.ampdat.xxx synthetic2layb.ampdat.xxx \
  data2lay.ampdat.xxx data2layb.ampdat.xxx
	gnuplot $< 

# ======================================================================
# 4. Additional series to be convolved
# ====================================
# Create additional test time series which will be used to test soutifus
# ability to reproduce the actual source time function.
additional.sff: win.fil.xxx
	/bin/rm -fv $@
	tesiff -r 1000. -n $(WINLIM) $@

# Apply the source time function filter as defined above to the additional
# test waveform data. The filter result will be compared fo time series
# filtered by soutifu.
additionalfiltered.sff: additional.sff stf.fil.xxx
	tidofi -v -o -cf $(word 2,$^) $@ $<
 
# ======================================================================
# 5. Operate on SeismicUn*x data
# ==============================
# In order to provide test data and test results in Seismic Un*x, such that
# they can be further processed by SU tools, we provide conversion rules.

%.su: %.sff; any2any --verbose --itype sff --otype su --overwrite $@ $<
%_conv.sff: %.su; any2any --verbose --otype sff --itype su --overwrite $@ $<

# ============================================================================
# 6. Test cases
# =============
#

# 6a. Test case 1
# ---------------
define TESTCASE1
Synthetics are calculated with a standard source time function which is band
limited and has a duration of $(SRCDUR) seconds. The recorded data is
simulated from this by applying a low-pass filter, a scaling factor, and a
time delay. Noise with an rms-amplitude of $(NOISEAMP) additionally is added
to the simulated recordings. Because simulated recordings and synthetics have
the same wave propagation characteristics, the simulated field data can
exactly be reproduced by the source time function correction filter, at least
in the case where no noise is added to the data.
endef
export TESTCASE1

SOUTIFU1SHIFT=0.4
SOUTIFU1=fdlsq:tshift=$(SOUTIFU1SHIFT)
soutifu1_data.sff: data2lay.sff; /bin/cp -vpd $< $@
soutifu1_synthetic.sff: synthetic2lay.sff; /bin/cp -vpd $< $@

soutifu1_signaldesc.xxx: stf.fil.xxx zforce.xxx
	printf "$$TESTCASE1" > $@
	printf "\n\nContents of $< are:\n" >> $@
	cat $< >> $@
	printf "\n\nContents of $(word 2,$^) are:\n" >> $@
	cat $(word 2,$^) >> $@

soutifu1_convseis.su soutifu1_stf.su soutifu1_add.su: \
  soutifu1_data.su soutifu1_synthetic.su additional.su
	soutifu -v -o -wc soutifu1_convseis.su -ws soutifu1_stf.su \
	  --type su $(SOUTIFU1) -add additional.su -wa soutifu1_add.su $^

soutifu1_description.xxx: soutifu1_signaldesc.xxx
	echo "soutifu test case 1: $(SOUTIFU1)" > $@
	echo >> $@
	cat $< >> $@

soutifu1_section.ps: soutifu1_data.su soutifu1_synthetic.su \
  soutifu1_convseis.su
	refractx -d $@/vcps -ty su \
	  -Sm 2 -Se 1.9 -C -Sa 2.6 -Sc 5. -St 0.,.8\
	  -Tt "soutifu test case 1: $(SOUTIFU1)" \
	  $(word 1,$^) n:"recorded data" s:2,1,5 r:0.7,0.7,0.7 \
	  $(word 2,$^) n:"synthetics" s:3,1,1 r:0.,0.,1.\
	  $(word 3,$^) n:"synthetics convolved with stf" s:4,1,1 r:1.,0.,0. 

soutifu1_add.ps: additional.su soutifu1_add.su additionalfiltered.su
	stuplox -v -d $@/vcps -ty su -C -s x -i -Y 0.8 -c fT \
	  $(word 1,$^) nc: $(word 2,$^) nc: $(word 3,$^)

soutifu1_add_%.ps: soutifu1_add.su additional.su additionalfiltered.su
	stuploxx -v -device $@/cps \
	  -title="Test soutifu convolving an additional signal" \
	  -labh=0.23 -labr -labe -labu -labc \
	  $(word 1,$^) sf:1.2 f:su p:2 ci:2 \
	    t:$(patsubst soutifu1_add_%.ps,%,$@) \
	    n:"%F #%NT: trace returned from soutifu" \
	  $(word 2,$^) sf:1.2 f:su p:1 ci:1 \
	    t:$(patsubst soutifu1_add_%.ps,%,$@) \
	    n:"%F #%NT: input to soutifu" \
	  $(word 3,$^) sf:1.2 f:su p:3 ci:4 \
	    t:$(patsubst soutifu1_add_%.ps,%,$@) \
	    n:"%F #%NT: input externally filtered with STF" \
	    $(word 1,$^) sf:1.2 f:su lw:4 p:4 ci:2 \
	    t:$(patsubst soutifu1_add_%.ps,%,$@) n:"%F #%NT" \
	  $(word 3,$^) sf:1.2 f:su p:4 ci:4 \
	    t:$(patsubst soutifu1_add_%.ps,%,$@) n:"%F #%NT" 

soutifu1_stf.ps: soutifu1_stf.su
	stuplox -ty su -d $@/ps -E -m 0. -Y 0.9 -S -$(SOUTIFU1SHIFT) \
	  -R 0.7 -T "soutifu test case 1: $(SOUTIFU1)" -l 3,3,3\
	  -u "source time function" $<

#----------------------------------------------------------------------
# prepare report for the test with additional time series

SOUTIFU1ADD=soutifu1_add $(addprefix soutifu1_add_,1 2 3 4 5 6 7 8)

soutifu1_add_report.ps: soutifu1_description.ps soutifu1_section.ps\
  soutifu1_stf.ps $(addsuffix .ps,$(SOUTIFU1ADD))
	gs -sDEVICE=pswrite -dNOPAUSE -dBATCH -sOutputFile=$@ $^
soutifu1_add_report.pdf: soutifu1_description.ps soutifu1_section.ps\
  soutifu1_stf.ps $(addsuffix .ps,$(SOUTIFU1ADD))
	gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOutputFile=$@ $^

#----------------------------------------------------------------------
# 6b. Test case 2
# ---------------
define TESTCASE2
We take the same data like in test case 1. This time, however, data and
synthetics are swapped. Since synthetics are narrow band with respect to
data an appropriate water level is required.

As a consequence of swapping the role of data and synthetics, the source time
function correction necessarily is entirely acausal. Since simulated data and
synthetics are both based on the same wave propagation characteristics,
soutifu should be able to almost reproduce the simulated data, at least in the
case where no noise is added.
endef
export TESTCASE2

SOUTIFU2SHIFT=0.4
SOUTIFU2WL=1.
SOUTIFU2=fdlsq:tshift=$(SOUTIFU2SHIFT):waterlevel=$(SOUTIFU2WL)
soutifu2x_data.sff: synthetic2lay.sff; /bin/cp -vpd $< $@
soutifu2x_synthetic.sff: data2lay.sff; /bin/cp -vpd $< $@

soutifu2x_convseis.su soutifu2x_stf.su: \
  soutifu2x_data.su soutifu2x_synthetic.su
	soutifu -v -o -wc soutifu2x_convseis.su -ws soutifu2x_stf.su \
	  --type su $(SOUTIFU2) $^

soutifu2x_description.xxx: soutifu1_signaldesc.xxx
	printf "soutifu test case 2: $(SOUTIFU2)\n\n" > $@
	printf "$$TESTCASE2" >> $@
	printf "\n\nSignal description from test case 1:\n" >> $@
	cat $< >> $@

soutifu2x_section.ps: soutifu2x_data.su soutifu2x_synthetic.su \
  soutifu2x_convseis.su
	refractx -d $@/vcps -ty su \
	  -Sm 2 -Se 2.2 -C -Sa 2.6 -Sc 5. -St 0.,.8\
	  -Tt "soutifu test case 1: $(SOUTIFU2)" \
	  $(word 1,$^) n:"recorded data" s:2,1,5 r:0.7,0.7,0.7 \
	  $(word 2,$^) n:"synthetics" s:3,1,1 r:0.,0.,1.\
	  $(word 3,$^) n:"synthetics convolved with stf" s:4,1,1 r:1.,0.,0. 

soutifu2x_stf.ps: soutifu2x_stf.su
	stuplox -ty su -d $@/ps -E -m 0. -Y 0.9 -S -$(SOUTIFU1SHIFT) \
	  -R 0.6 -L 0.1 -T "soutifu test case 2: $(SOUTIFU2)" -l 3,3,3\
	  -u "source time function" $<

soutifu2a_report.pdf:
	/bin/rm -fv *.fil.xxx soutifu2x*
	$(MAKE) soutifu2x_report.pdf SOUTIFU2WL=10.
	/bin/mv -fv soutifu2x_report.pdf $@
soutifu2b_report.pdf:
	/bin/rm -fv *.fil.xxx soutifu2x* *description.xxx
	$(MAKE) soutifu2x_report.pdf SOUTIFU2WL=1.e-4
	/bin/mv -fv soutifu2x_report.pdf $@
soutifu2c_report.pdf:
	/bin/rm -fv *.fil.xxx soutifu2x* *description.xxx
	$(MAKE) soutifu2x_report.pdf SOUTIFU2WL=1.e-30
	/bin/mv -fv soutifu2x_report.pdf $@

#----------------------------------------------------------------------
# 6c. Test case 3
# ---------------
define TESTCASE3
The model for which synthetics are calculated produced a slightly smaller wave
propagation. It is no longer possible to repoduce the data with a single
source time function correction filter for all traces. Therefore a compromise
has to be made between far and near offset traces. This test case can be used
to study the effect of waterlevel and offset dependent weights.

Signal description:
Synthetics are calculated with a standard source time function which is band
limited and has a duration of $(SRCDUR) seconds. The recorded data is
simulated from this by applying a low-pass filter, a scaling factor, and a
time delay. 

Noise with an rms-amplitude of $(NOISEAMP) is added to the data.
endef
export TESTCASE3

SOUTIFU3SHIFT=0.4
SOUTIFU3WL=1.e-4
SOUTIFU3EXP=0.
SOUTIFU3=fdlsq:tshift=$(SOUTIFU3SHIFT):waterlevel=$(SOUTIFU3WL):exp=$(SOUTIFU3EXP)
soutifu3x_data.sff: data2lay.sff; /bin/cp -vpd $< $@
soutifu3x_synthetic.sff: synthetic2layb.sff; /bin/cp -vpd $< $@

soutifu3x_convseis.su soutifu3x_stf.su: \
  soutifu3x_data.su soutifu3x_synthetic.su
	soutifu -v -o -wc soutifu3x_convseis.su -ws soutifu3x_stf.su \
	  --type su $(SOUTIFU3) $^

soutifu3x_description.xxx: stf.fil.xxx zforce.xxx
	printf "soutifu test case 3: $(SOUTIFU3)\n\n" > $@
	printf "$$TESTCASE3" >> $@
	printf "\n\nContents of $< are:\n" >> $@
	cat $< >> $@
	printf "\n\nContents of $(word 2,$^) are:\n" >> $@
	cat $(word 2,$^) >> $@

soutifu3x_section.ps: soutifu3x_data.su soutifu3x_synthetic.su \
  soutifu3x_convseis.su
	refractx -d $@/vcps -ty su \
	  -Sm 2 -Se 2.2 -C -Sa 2.6 -Sc 5. -St 0.,.8\
	  -Tt "soutifu test case 1: $(SOUTIFU3)" \
	  $(word 1,$^) n:"recorded data" s:2,1,5 r:0.7,0.7,0.7 \
	  $(word 2,$^) n:"synthetics" s:3,1,1 r:0.,0.,1.\
	  $(word 3,$^) n:"synthetics convolved with stf" s:4,1,1 r:1.,0.,0. 

soutifu3x_stf.ps: soutifu3x_stf.su
	stuplox -ty su -d $@/ps -E -m 0. -Y 0.9 -S -$(SOUTIFU1SHIFT) \
	  -R 0.6 -L 0.1 -T "soutifu test case 2: $(SOUTIFU3)" -l 3,3,3\
	  -u "source time function" $<

soutifu3a_report.pdf:
	/bin/rm -fv *.fil.xxx soutifu3x* *description.xxx
	$(MAKE) soutifu3x_report.pdf STFPER=0.001 SOUTIFU3WL=1.e-4
	/bin/mv -fv soutifu3x_report.pdf $@
soutifu3b_report.pdf:
	/bin/rm -fv *.fil.xxx soutifu3x* *description.xxx
	$(MAKE) soutifu3x_report.pdf STFPER=0.001 SOUTIFU3WL=1.
	/bin/mv -fv soutifu3x_report.pdf $@
soutifu3c_report.pdf:
	/bin/rm -fv *.fil.xxx soutifu3x* *description.xxx
	$(MAKE) soutifu3x_report.pdf STFPER=0.001 SOUTIFU3WL=1.e-2 SOUTIFU3EXP=4.
	/bin/mv -fv soutifu3x_report.pdf $@

#======================================================================
# 7. Compile reports 
# ==================
#
%_description.ps: %_description.xxx
	a2ps -o $@ --center-title=$(patsubst %_description.xxx,%,$<) $<

%_report.ps: %_description.ps %_section.ps %_stf.ps
	gs -sDEVICE=pswrite -dNOPAUSE -dBATCH -sOutputFile=$@ $^
%_report.pdf: %_description.ps %_section.ps %_stf.ps
	gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -sOutputFile=$@ $^

# ======================================================================
# 8. Previewer
# ============
#
PDFPREVIEWER=evince
%.pdf: %.ps; ps2pdf $<
%.psp: %.ps; gv $<; /bin/rm -fv $<
%.pdp: %.pdf; $(PDFPREVIEWER) $<; /bin/rm -fv $<

# ----- END OF Makefile.soutifu ----- 
