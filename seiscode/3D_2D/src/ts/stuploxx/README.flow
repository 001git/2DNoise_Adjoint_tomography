/*! \file README.flow
\verbatim
this is <README.flow>
============================================================================
about workflow
============================================================================
\endverbatim
*/

/*! \page page_processing Processing workflow

\section sec_main Processing workflow in main program

  \sa main()

  \subsection subsec_main_step1 step 1: provide help if requested
     \sa \ref subsubsec_main_step1

  \subsection subsec_main_step2 step 2: evaluate command line options
     \sa \ref subsubsec_main_step2

  \subsection subsec_main_step3 step 3: extract command line parameters
     \sa \ref subsubsec_main_step3

    -# raw parsing is done by
      \code
      // data file parameters from command line
      tfxx::cmdline::Tparsed 
        filenames=tfxx::cmdline::parse_cmdline(cmdline, stuplo::keys,
                                               opt.verbose);
      \endcode
    -# values are extracted by
      \code
      // fill data file parameter list
      stuplo::FileParametersList fpl=setparameters(filenames, pgstyle);
      \endcode

    A representation of the file specific settings on the command line are
    then present in 
    \code
      stuplo::FileParametersList fpl
    \endcode

    Apart from the filenames and trace selection this includes plot specific
    settings like plot ranges, line styles, etc. However, prior to reading the
    data, the number of actual data traces may not be known at this stage.
    Distribution of traces to panels is not yet possible.

    Other plot style options are available from command line parameters not
    associated to file names. They also cannot be mixed with file specific
    parameters at this stage. Only some of them might be used to set defaults
    for file specific parameters not specified on the commandline.

  \subsection subsec_main_step4 step 4: initialize scaling values
     \sa \ref subsubsec_main_step4

    \code
    // create handle for scaling
    stuplo::THScaling hscaling(new stuplo::Scaling());
    // re-init time scale upon re-read if in repeat mode
    if (opt.repeat) { hscaling->alwaysinittime=true; }
    \endcode

  \subsection subsec_main_step5 step 5: open graphics device
     \sa \ref subsubsec_main_step5

    \code
    // create primary pgplot device
    TFXX_debug(opt.debug, "main", "open plot device");
    pgplot::device dev(opt.device.c_str());
    dev.ask(false);
    \endcode

  \subsection subsec_main_step6 step 6: enter loop and read data
     \sa \ref subsubsec_main_step6
    Here the program enters the outermost processing loop.
    Looping allows to re-read data in interactive mode.

    Reading is accomplished by
    \code
      // read data from file
      stuplo::DataFileList dfl=readdata(fpl);
    \endcode

    Actual time series are now available. The number of traces and the
    available time windows and sample value ranges are now known. At this
    stage data may be distributed to panels.

    This means that rereading time series data must always be followed by
    appropriate steps to setup a new set of panels with appropriate ranges.

    \note
    What happens, in case there appears a different number of panels
    after rereading the data? How should stored scaling factors be applied?
    There are two different possible ways: association by panel number,
    association by file name or other data specific attribute. The first way
    appears to be most reasonable.

    First find the largest panel number requested on the command line to
    ensure that at least this number of panels is created. Then the contents
    of stuplo::DataFileList dfl that is sorted filename wise will be resorted
    panelwise.

    An array with one element per expected panel will be created. This will
    contain default scaling values as derived from the read data and
    commandline options.

    This step is used only once. It will skipped upon reading the data a
    second time. In case data is reread, these scaling values must be stored
    previous to rereading the data.

  \subsection subsec_main_step7 step 7: open appropriate screen and plot data
     \sa \ref subsubsec_main_step7

  \subsection subsec_main_step8 step 8: process interactive response or repeat command
     \sa \ref subsubsec_main_step8

  Each panel only has to handle its world coordinates. The values for the
  viewport coordinates will be defined by the next level (the screen).

  The pgplot::Tpanel class supports nested viewport definitions. There is a
  so-called total viewport defining the rectangle to be used with respect to
  the total view surface. The viewport of the panel is the rectangle within
  the total viewport that is used for the graph.

  The screen should know of viewports relative to the total view surface and
  about the common time scale for all panels. It should call a member function
  of each panel and pass the viewport, the time scale and the plot device.
  The panel should then be able to draw itself. Another possibilty is to pass
  an object of type pgplot::Tpanel to the stuplo::panel.






\subsection subsec_main_browser Source code browser
  \dontinclude stuploxx.cc

  \subsubsection subsubsec_main_step1 step 1: source browser
     \skip step 1
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step2 step 2: source browser
     \skip step 2
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step3 step 3: source browser
     \skip step 3
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step4 step 4: source browser
     \skip step 4
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step5 step 5: source browser
     \skip step 5
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step6 step 6: source browser
     \skip step 6
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step7 step 7: source browser
     \skip step 7
     \until *----------------------------------------------------------------------*

  \subsubsection subsubsec_main_step8 step 8: source browser
     \skip step 8
     \until *----------------------------------------------------------------------*


*/

----- END OF README.flow ----- 
